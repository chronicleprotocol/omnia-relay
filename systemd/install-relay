#!/usr/bin/env bash
set -eo pipefail

[[ -z "$ORACLE_DEBUG" ]] || set -x

SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" && pwd)"
TARGET_DIR="${TARGET_DIR:-/etc/systemd/system}"
SHARE_DIR="${SHARE_PATH:-$SCRIPT_DIR}"

export SSB_PATH="${SSB_PATH:-$(command -v ssb-server)}"
export SSB_CONF="${SSB_CONF:-$(dirname "$(command -v ssb-server)")/.ssb/config}"

export TORPROXY_PATH=${TORPROXY_PATH:-$(command -v tor)}
export TORPROXY_CONFIG=${TORPROXY_CONFIG:-/etc/torrc}

export SPIRE_PATH="${SPIRE_PATH:-$(command -v spire)}"
export SPIRE_CONFIG="${SPIRE_CONFIG:-/etc/spire.conf}"
export SPIRE_LOG_FORMAT="${SPIRE_LOG_FORMAT:-"text"}"
export SPIRE_LOG_VERBOSITY="${SPIRE_LOG_VERBOSITY:-"error"}"

export OMNIA_PATH="${OMNIA_PATH:-$(command -v omnia)}"
export OMNIA_CONFIG="${OMNIA_CONFIG:-/etc/omnia.conf}"

usage() {
	cat >&2 << EOF
Usage: install-relay COMMAND OPTIONS...

Commands:
  --help  Print this message

Options:
  --from ADDRESS   Set Ethereum address to use for signing
  --keystore PATH  Set Ethereum keystore path
  --password PATH  Set Ethereum keystore password file path

  --ssb-caps CAPS_FILE           Set Scuttlebot caps from file
  --ssb-external EXTERNAL_ADDRS  Set Scuttlebot external IP/host address
  --ssb-secret SECRET_FILE       Install Scuttlebot secret
  --ssb-gossip GOSSIP_JSON_FILE  Install Scuttlebot gossip.json file

  --eth-rpc URL                          add an ethereum node rpc url to the list (can be used multiple times)
  --eth-type ethereum|optimism|arbitrum  set blockchain type
  --eth-gas GAS_LIMIT                    set gas limit for transactions

  --log-format text|json                    format logs as text or json
  --log-verbosity error|warning|info|debug  set log verbosity

  --verbose  enable verbose output (for Omnia only)
  --debug    run in debug mode (for Omnia only)
EOF
	exit 1
}

subst() {
	local name
	name="$1.service"
	local target
	target="$TARGET_DIR"/"$name"
	local restart
	restart=$(if [[ -e "$target" ]]; then echo 1; fi)

	# shellcheck disable=SC2016
	envsubst '
$USER
$SSB_PATH $SSB_CONF $SSB_CAPS $SSB_KEYS $SSB_PORT $SSB_HOST
$OMNIA_PATH $OMNIA_CONFIG
$SPIRE_PATH $SPIRE_CONFIG $SPIRE_LOG_VERBOSITY $SPIRE_LOG_FORMAT
$TORPROXY_PATH $TORPROXY_CONFIG
' < "$2" | sudo tee "$target" >&2

	echo >&2 "$name -> $target"

	systemdCmd+="systemctl enable $name # Enable auto-start of $1 service at boot
"
	if [[ -n "$restart" ]]; then
		systemdCmd+="systemctl restart $name # Restart $1 service now
"
	else
		systemdCmd+="systemctl start $name # Start $1 service now
"
	fi
}

declare -a configUpdates
declare -a configOverrides
copyOmniaConf() {
	echo >&2 "OMNIA_CONFIG: START"

	if [[ -f "$OMNIA_CONFIG" ]]; then
		local _savedConfig
		_savedConfig="$(jq -c '{ethereum} | del(.. | nulls)' "$OMNIA_CONFIG")"
		if [[ -n "$_savedConfig" ]]; then
			configUpdates+=(". + $_savedConfig")
		fi
	fi

	local chainType="$1"
	local chainVariant="$2"

	if [[ "$chainType" != "ethereum" ]]; then
		local _copyData
		_copyData="$(jq -c '{feeds,scuttlebotIdMap,transports} | del(.. | nulls)' "${SHARE_DIR}/relay-ethereum-$chainVariant.json")"
		configUpdates+=(". + $_copyData")
	fi

	local _omniaConfig="relay-$chainType-$chainVariant.json"
	[[ -f "${SHARE_DIR}/$_omniaConfig" ]] || { echo >&2 "ERROR: $_omniaConfig not found in ${SHARE_DIR}"; exit 1; }

	sudo cp -v "${SHARE_DIR}/$_omniaConfig" "$OMNIA_CONFIG" >&2
	sudo chmod u+w "$OMNIA_CONFIG" >&2

	configUpdates+=('.options.logFormat = "text"')

	for i in "${!configUpdates[@]}"; do
		echo >&2 "${configUpdates[$i]}"
		sudo tee "$OMNIA_CONFIG" <<< "$(jq "${configUpdates[$i]}" "$OMNIA_CONFIG")" > /dev/null
	done
	for i in "${!configOverrides[@]}"; do
		echo >&2 "${configOverrides[$i]}"
		sudo tee "$OMNIA_CONFIG" <<< "$(jq "${configOverrides[$i]}" "$OMNIA_CONFIG")" > /dev/null
	done

	echo >&2 "OMNIA_CONFIG: DONE"
}

declare -a ssbConfigUpdates
copySsbConf() {
	echo >&2 "SSB_CONF: START"
	ssbConfigUpdates+=(".friends.hops = (.friends.hops // 6)")

	local confDir="$HOME/.ssb"
	export SSB_KEYS="$confDir/secret"
	export SSB_GOSSIP="$confDir/gossip.json"
	export SSB_CONF="$confDir/config"

	local updatedConf

	mkdir -p "$confDir"

	if [[ -f $SSB_CONF ]]; then
		updatedConf=$(jq . "$SSB_CONF")
	fi
	[[ -n $updatedConf ]] || updatedConf=$(jq . "${SHARE_DIR}/ssb-config.json")

	for i in "${!ssbConfigUpdates[@]}"; do
		updatedConf=$(jq -c "${ssbConfigUpdates[$i]}" <<< "$updatedConf")
	done

	tee "$SSB_CONF" <<< "$updatedConf" > /dev/null 2>&1

	export SSB_HOST
	SSB_HOST="$(jq -cr '.connections.incoming["net"][].host | select(.!= null) // "localhost"' <<< "$updatedConf")"
	export SSB_PORT
	SSB_PORT="$(jq -cr '.connections.incoming["net"][].port | select(.!= null) // 8007' <<< "$updatedConf")"

	if [[ -n "$installSsbSecret" ]]; then
		cp -iv "$installSsbSecret" "$SSB_KEYS"
		chmod 0600 "$SSB_KEYS"
	fi

	if [[ -n "$installSsbGossip" ]]; then
		cp -iv "$installSsbGossip" "$SSB_GOSSIP"
		chmod 0600 "$SSB_GOSSIP"
	fi

	echo >&2 "SSB_CONF: DONE"
}

declare -a spireConfigUpdates
declare -a spireConfigOverrides
copySpireConf() {
	echo >&2 "SPIRE_CONFIG: START"

	if [[ -f "${SPIRE_CONFIG%.conf}.json" ]]; then
		sudo mv -f "${SPIRE_CONFIG%.conf}.json" "$SPIRE_CONFIG"
	fi

	if [[ -f "$OMNIA_CONFIG" ]]; then
		local _omniaConfig
		_omniaConfig="$(jq '.' -c "$OMNIA_CONFIG")"

		spireConfigOverrides+=(".feeds = $(jq '.scuttlebotIdMap | keys' -c <<<"$_omniaConfig")")
		spireConfigOverrides+=(".spire.pairs = $(jq '.pairs | keys | unique[] | sub("/";"")' -c <<<"$_omniaConfig" | jq -s -c)")
		spireConfigOverrides+=(".ethereum = $(jq '.ethereum' -c <<<"$_omniaConfig")")
	fi

	sudo cp -v "${SHARE_DIR}/spire.json" "$SPIRE_CONFIG" >&2
	sudo chmod u+w "$SPIRE_CONFIG" >&2

	for i in "${!spireConfigUpdates[@]}"; do
		echo >&2 "  ${spireConfigUpdates[$i]}"
		sudo tee "$SPIRE_CONFIG" <<<"$(jq -c "${spireConfigUpdates[$i]}" "$SPIRE_CONFIG")" > /dev/null
	done
	for i in "${!spireConfigOverrides[@]}"; do
		echo >&2 "  ${spireConfigOverrides[$i]}"
		sudo tee "$SPIRE_CONFIG" <<<"$(jq -c "${spireConfigOverrides[$i]}" "$SPIRE_CONFIG")" > /dev/null
	done

	echo >&2 "SPIRE_CONFIG: DONE"
}

copyTorConfig() {
	echo >&2 "TORPROXY_CONFIG: START"

	sudo cp -v "${SHARE_DIR}/torproxy.ini" "${TORPROXY_CONFIG}" >&2
	sudo chmod u+w "${TORPROXY_CONFIG}" >&2

	# shellcheck disable=SC2174
	mkdir -m 0700 -p "$HOME"/.tor/{run,data,srv} > /dev/null

	if ! [[ -f "${HOME}/.tor/srv/hostname" ]]; then
		local _HD_SEED
		_HD_SEED="$(keeman gen -k 8)"
		local _TOR_JSON
		_TOR_JSON="$(keeman der -f onion <<<"$_HD_SEED")"
		jq '.hostname' -r <<<"$_TOR_JSON" > "${HOME}/.tor/srv/hostname"
		jq '.public_key' -r <<<"$_TOR_JSON" > "${HOME}/.tor/srv/$(jq '.prefix' -r <<<"$_TOR_JSON")_public_key"
		jq '.secret_key' -r <<<"$_TOR_JSON" > "${HOME}/.tor/srv/$(jq '.prefix' -r <<<"$_TOR_JSON")_secret_key"

		chmod 0600 "${HOME}/.tor/srv/"*

		echo >&2
		echo >&2
		echo >&2 "----------------------------------------------------------------------------------------------------"
		echo >&2 "Your key generation seed phrase is:"
		echo >&2 "${_HD_SEED}"
		echo >&2 "----------------------------------------------------------------------------------------------------"
		echo >&2
		echo >&2
	fi

	sudo tee -a "${TORPROXY_CONFIG}" <<< "ControlSocket ${HOME}/.tor/run/control"
	sudo tee -a "${TORPROXY_CONFIG}" <<< "CookieAuthFile ${HOME}/.tor/run/control.authcookie"
	sudo tee -a "${TORPROXY_CONFIG}" <<< "DataDirectory ${HOME}/.tor/data"

	sudo tee -a "${TORPROXY_CONFIG}" <<< "HiddenServiceDir ${HOME}/.tor/srv"
	sudo tee -a "${TORPROXY_CONFIG}" <<< "HiddenServicePort 8888 127.0.0.1:8800"
	sudo tee -a "${TORPROXY_CONFIG}" <<< "HiddenServiceVersion 3"

	echo >&2 "TORPROXY_CONFIG: DONE"
}

installConfigs() {
	echo "INSTALL CONFIGS: START"
	copyOmniaConf "$chainType" "$chainVariant"
	copySsbConf
	copySpireConf
	copyTorConfig
	echo "INSTALL CONFIGS: DONE"
}

installServices() {
	echo "INSTALL SERVICES: START"
	subst torproxy "${SHARE_DIR}"/torproxy.service
	subst spire-agent "${SHARE_DIR}"/spire-agent.service
	subst ssb-server "${SHARE_DIR}"/ssb-server.service
	subst omnia "${SHARE_DIR}"/omnia.service
	echo "INSTALL SERVICES: DONE"
}

if [[ "$1" =~ ^ethereum|optimism|arbitrum$ ]]; then
	chainType="$1"
	shift
else
	echo >&2 "Chain type must be one of [ethereum,optimism,arbitrum]"
fi

if [[ -n "$1" ]]; then
	chainVariant="$1"
	shift
else
	chainVariant="mainnet"
fi

while [[ -n "$1" ]]; do
	case "$1" in
		--debug)
			configOverrides+=(".options.debug = true")
			;;
		--verbose)
			configOverrides+=(".options.verbose = true")
			;;
		--eth-gas)
			configOverrides+=(".options.ethGas = $2")
			shift
			;;
		--eth-rpc)
			configUpdates+=(".ethereum.network = \"$2\"")
			shift
			;;
		--from)
			configOverrides+=(".ethereum.from = \"$2\"")
			shift
			;;
		--keystore)
			configOverrides+=(".ethereum.keystore = \"$2\"")
			spireConfigOverrides+=(".ethereum.keystore = \"$2\"")
			shift
			;;
		--password)
			configOverrides+=(".ethereum.password = \"$2\"")
			spireConfigOverrides+=(".ethereum.password = \"$2\"")
			shift
			;;
		--feed-map)
			configOverrides+=(".scuttlebotIdMap = $2")
			shift
			;;
		--pairs)
			configOverrides+=(".pairs = $2")
			shift
			;;
		--spire-bootstraps)
			spireConfigOverrides+=(".transport.libp2p.bootstrapAddrs = $2")
			shift
			;;
		--spire-port)
			spireConfigOverrides+=(".transport.libp2p.listenAddrs = [\"/ip4/0.0.0.0/tcp/$2\"]")
			shift
			;;
		--spire-seed)
			spireConfigOverrides+=(".transport.libp2p.privKeySeed = \"$2\"")
			shift
			;;
		--network)
			configOverrides+=(".ethereum.network = \"$2\"")
			shift
			;;
		--network-key)
			configOverrides+=(".ethereum.infuraKey = \"$2\"")
			shift
			;;
		--no-transport)
			configOverrides+=(".transports = []")
			;;
		--add-transport)
			configOverrides+=(".transports += [\"$2\"]")
			shift
			;;
		--no-source)
			configOverrides+=(".sources = []")
			;;
		--add-source)
			configOverrides+=(".sources += [\"$2\"]")
			shift
			;;
		--ssb-external)
			ssbConfigUpdates+=(".connections.incoming[\"net\",\"ws\"][].external = \"$2\"")
			shift
			;;
		--ssb-caps)
			ssbConfigUpdates+=(".caps = $(jq . "$2")")
			shift
			;;
		--ssb-secret)
			installSsbSecret="$2"
			shift
			;;
		--ssb-port)
			ssbConfigUpdates+=(".connections.incoming[\"net\"][].port = \"$2\"")
			shift
			;;
		--ssb-port-ws)
			ssbConfigUpdates+=(".connections.incoming[\"ws\"][].port = \"$2\"")
			shift
			;;
		--ssb-gossip)
			installSsbGossip="$2"
			shift
			;;
		--log-format)
			configOverrides+=(".options.logFormat = \"$2\"")
			SPIRE_LOG_FORMAT="$2"
			shift
			;;
		--log-verbosity)
			if [[ $2 =~ warning|info|debug ]]; then
				configOverrides+=(".options.verbose = true")
			else
				configOverrides+=(".options.verbose = false")
			fi
			SPIRE_LOG_VERBOSITY="$2"
			shift
			;;
		--help | -h)
			usage
			;;
		--logger)
			spireConfigOverrides+=(".logger = $2")
			shift
			;;
		*)
			echo >&2 "\"$1\" is not a valid option"
			usage
			;;
	esac
	shift
done

installConfigs
installServices

echo >&2 "To (re)start Omnia now (and auto-start on reboot) run:"
echo "systemctl daemon-reload # Reload systemd services"
echo -n "$systemdCmd"
